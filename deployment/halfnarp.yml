---
- hosts: plain-dtfh

  handlers:
   - name: restart postgresql
     service: name=postgresql state=restarted

  vars:
   - www_server_name: halfnarp.events.ccc.de
   - backend_user: halfnarp
   - backend_name: halfnarp_backend
   - backend_path: /home/halfnarp/backend
   - frontend_path: /home/halfnarp/frontend
   - pgsql_user_group_id: 999

  tasks:

    - name: Setup pgsql group
      group:
        name=pgsql
        gid={{ pgsql_user_group_id }}

    - name: Setup pgsql user
      user:
        name=pgsql
        uid={{ pgsql_user_group_id }}
        group=pgsql
        comment="PostgreSQL pseudo-user"
        home=/usr/local/pgsql
        createhome=no
        shell=/bin/sh


    - name: Install packages
      pkgng:
        name={{ item }}
        state=present
      with_items:
        - nginx
        - postgresql93-server
        - postgresql93-contrib
        - py27-pip
        - py27-virtualenv
        - rsync
        - sudo


    - name: Install python postgresql driver
      pip: name=psycopg2

    - name: Set owner on pgsql data dir
      file:
        dest=/usr/local/pgsql
        owner=pgsql
        group=pgsql

    - name: Setup postgresql to start on boot
      service: name=postgresql enabled=yes state=stopped
      ignore_errors: yes

    - name: Create DB files
      command: service postgresql initdb creates=/usr/local/pgsql/data/postgresql.conf

    - name: Setup postgresql to start on boot
      service: name=postgresql enabled=yes state=started
      ignore_errors: yes

    - name: ensure app database user exists
      postgresql_user:
        name={{ backend_user }}
        db=postgres
        role_attr_flags=NOCREATEROLE,CREATEDB,NOSUPERUSER
        login_user=pgsql

    - name: ensure backend database exists
      postgresql_db:
        name={{backend_name}}
        encoding='UTF-8'
        template='template0'
        owner={{ backend_user }}
        login_user=pgsql

    - name: install pgcrypto extension
      postgresql_ext:
        name: pgcrypto
        db: "{{backend_name}}"
        login_user: pgsql
      tags: pgcrypto

    - name: create application user
      user: name={{backend_user}} createhome=yes

    - name: ensure backend directory exists
      file: path={{backend_path}} state=directory owner={{backend_user}} mode=755

    - name: ensure frontend directory exists
      file: path={{frontend_path}} state=directory owner={{backend_user}} mode=755

    - name: ensure var directory exists
      file: path={{backend_path}}/var state=directory owner={{backend_user}} mode=755

    - name: ensure pip cache directory exists
      file: path={{backend_path}}/.pip/download_cache state=directory owner={{backend_user}} mode=755

    - name: configure pip (to use cache)
      copy: src=pip.conf dest={{backend_path}}/.pip/pip.conf

    - name: init virtualenv in application directory
      command: virtualenv --system-site-packages . chdir={{backend_path}} creates={{backend_path}}/bin/python

    - name: configure startup script
      template: src={{backend_name}} dest=/usr/local/etc/rc.d/{{backend_name}} owner=root mode=755

    - name: configure application
      copy: src=production.ini dest={{backend_path}}/production.ini

    - name: enable application at startup time
      service: name={{backend_name}} enabled=yes

    - name: ensure application ownership
      command: chown -R {{backend_user}} {{backend_path}}

    - name: ensure log folder exists
      file: path=/var/log state=directory owner=root mode=755

    - name: ensure log file exists
      file: path=/var/log/{{backend_name}}.log state=touch owner={{backend_user}} mode=750

    - name: ensure pid directory exists
      file: path=/var/run/{{backend_name}} state=directory owner={{backend_user}} mode=755

    - name: configure nginx
      template: src=nginx.conf dest=/usr/local/etc/nginx/conf.d/halfnarp.conf owner={{backend_user}} mode=555
      tags: nginx_config

    - name: ensure the www data directory exists
      file: path={{frontend_path}} state=directory owner={{backend_user}} mode=775

    - name: enable nginx at startup time
      service: name=nginx enabled=yes

    - name: make sure nginx is running or reloaded
      service: name=nginx state=restarted
